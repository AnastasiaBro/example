{"version":3,"sources":["container/People/People.js","App.js","serviceWorker.js","index.js"],"names":["localStorage","setItem","People","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","isLoading","hasMoreItems","nextHref","next","_this2","console","log","_isMounted","url","self","getItem","fetch","then","response","json","list","results","map","push","count","Number","length","setState","catch","error","loadContent","_this3","loader","react_default","a","createElement","className","items","undefined","item","key","created","name","react_infinite_scroller_default","pageStart","loadMore","bind","hasMore","id","onScroll","event","onScrollList","transition","Component","App","container_People_People","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.555a1a3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport './People.css';\r\n\r\nlet baseURL = 'https://swapi.co/api/people?page=1';\r\nlocalStorage.setItem('next', 1);\r\n//let url = '';\r\n\r\nclass People extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            isLoading: false,\r\n            hasMoreItems: true,\r\n            nextHref: this.props.next\r\n        }\r\n    }\r\n\r\n    loadContent () {\r\n        console.log('-------------------------------------');\r\n        this._isMounted = true;\r\n        let url = baseURL;\r\n        let self = this;\r\n\r\n        //console.log(baseURL);\r\n        //console.log(this.state.nextHref);\r\n        console.log(url);\r\n\r\n        if (localStorage.getItem('next') != 1) {\r\n\r\n            url = 'https://swapi.co/api/people?page=' + localStorage.getItem('next');\r\n            console.log('ссылка изм', url);\r\n\r\n        }\r\n\r\n        fetch(url)\r\n        .then( (response) => {\r\n            return response.json() })   \r\n                .then( (json) => {\r\n\r\n                        var list = this.state.data;                        \r\n                        json.results.map(data => {\r\n                            list.push(data);\r\n                        });\r\n                        \r\n                        console.log(json.count,  '>' , (Number(localStorage.getItem('next'))) * 10);\r\n                        console.log(list);\r\n\r\n                    if (json.count > (localStorage.getItem('next') * 10)) {\r\n                        console.log(this.state.data.length, localStorage.getItem('next') * 10);\r\n                        \r\n\r\n                       \r\n                            localStorage.setItem('next', Number(localStorage.getItem('next')) + 1);\r\n                            url = 'https://swapi.co/api/people?page=' + localStorage.getItem('next');\r\n                            console.log(url);\r\n\r\n                            self.setState({\r\n                                data: list\r\n                            });\r\n                            //this.loadContent();\r\n                        \r\n                        console.log('ссылка изменилась?', localStorage.getItem('next'));\r\n                    } else {\r\n                        this.setState({\r\n                            hasMoreItems: false\r\n                        });\r\n                    }\r\n                    console.log(this.state.data);\r\n\r\n                })\r\n                .catch(error => console.log('err ' + error));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadContent();\r\n        this._isMounted = true;\r\n    }\r\n\r\n    render () {\r\n        const loader = <div className=\"loader\">Загрузка...</div>;\r\n        console.log(this.state.data);\r\n        let items = null;\r\n\r\n        if (this.state.data !== undefined) {\r\n            let results = this.state.data;\r\n\r\n            items = results.map(item => {\r\n                return <div className=\"item\"\r\n                        key={item.created}\r\n                        >{item.name}</div>\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={this.loadContent.bind(this)}\r\n                        hasMore={this.state.hasMoreItems}\r\n                        loader={loader}\r\n                        key={this.props.id}\r\n                        >\r\n                            <ul className=\"product__list\" onScroll={event => this.onScrollList(event)} transition=\"ease 0.5s\" >{items}</ul>\r\n                    </InfiniteScroll>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"spinner\">Загрузка...</div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default People;","import React, { Component } from 'react';\nimport './App.css';\nimport People from './container/People/People';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <People/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}